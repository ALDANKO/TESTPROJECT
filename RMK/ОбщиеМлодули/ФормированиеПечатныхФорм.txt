
// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина, КодЯзыка = "ru") Экспорт

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,ЮридическийАдрес,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ";
	КонецЕсли; 

	Результат = "";

	НоваяСтрока = Ложь;
	
	СоответствиеПараметров = Новый Соответствие();

	СоответствиеПараметров.Вставить("ПолноеНаименование", 	"");
	
	Список = Список + ?(Прав(Список, 1) = ",", "", ",");
	
	СоответствиеПараметров.Вставить("КодПоЕДРПОУ", 				НСтр("ru='код по ЕГРПОУ ';	uk='код за ЄДРПОУ '",КодЯзыка));
	СоответствиеПараметров.Вставить("КодПоДРФО", 				НСтр("ru=' код по ГРФЛ ';uk=' код за ДРФО '",КодЯзыка));
	СоответствиеПараметров.Вставить("ИНН",						НСтр("ru='ИНН ';			uk='ІПН '",КодЯзыка));
	СоответствиеПараметров.Вставить("НомерСвидетельства", 		НСтр("ru='№ свид. ';		uk='№ свід.  '",КодЯзыка));
	СоответствиеПараметров.Вставить("ЮридическийАдрес",			НСтр("ru='';				uk=''",КодЯзыка));
	СоответствиеПараметров.Вставить("ФактическийАдрес",			НСтр("ru='';				uk=''",КодЯзыка));
	СоответствиеПараметров.Вставить("Телефоны",					НСтр("ru='тел.: ';			uk='тел.: '",КодЯзыка));
	СоответствиеПараметров.Вставить("НомерСчета",				НСтр("ru='т/с ';			uk='п/р '",КодЯзыка));
	СоответствиеПараметров.Вставить("Банк",               		НСтр("ru='в банке ';		uk='у банку '",КодЯзыка));
	СоответствиеПараметров.Вставить("МФО",                		НСтр("ru='МФО ';			uk='МФО '",КодЯзыка));
	СоответствиеПараметров.Вставить("ПлательщикНалогаНаПрибыль",НСтр("ru='';				uk=''",КодЯзыка));
	
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			Если ИмяПараметра = "/" Тогда
				НоваяСтрока = Истина;
				Продолжить;
			КонецЕсли; 
			
			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				
				Если ПустаяСтрока(Результат)Тогда 
					// это первый параметр, выведем префикс с большой буквы
					Префикс = ВРег(Лев(Префикс,1)) + Сред(Префикс,2);
				ИначеЕсли НоваяСтрока Тогда
					Результат = Результат + "," +Символы.ПС;
				Иначе
					Результат = Результат + ", " 
				КонецЕсли; 
				НоваяСтрока = Ложь;

				
				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СокрЛП(СтрокаДополнения);
			Исключение

				#Если Клиент Тогда
					Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);
 				#КонецЕсли

			КонецПопытки;
			
			
		КонецЕсли; 

	КонецЦикла;

 	Возврат СокрЛП(Результат);

	
	
КонецФункции // ОписаниеОрганизации()

// Добавлено для печати.
// Фомрирут массив параметров, для печати дополнительной информации
//
// Параметры: 
//  ВыборкаШапка   - результат запроса по шапке
//  Список         - список запрашиваемых параметров организаиии
//
// Возвращаемое значение:
//  Массив - со струтктурой (парами НазваниеПараметра:ЗначениеПараметра).
//
Функция ДополнительнаяИнформация(ВыборкаШапка, Список = "", КодЯзыка = "ru") Экспорт

	МассивСтруктур = Новый Массив();

	Если ПустаяСтрока(Список) Тогда
		Возврат МассивСтруктур;
	КонецЕсли; 

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ДоговорНаименованиеДляПечати", НСтр("ru='Договор:';uk='Договір:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Содержание",					НСтр("ru='Содержание:';uk='Зміст:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Склад",						НСтр("ru='Склад:';uk='Склад:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Заказ",						НСтр("ru='Заказ:';uk='Замовлення:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Сделка",						НСтр("ru='Сделка:';uk='Угода:'",КодЯзыка));
	СоответствиеПараметров.Вставить("ДокументПередачи",				НСтр("ru='Документ передачи:';uk='Документ передачі:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Инвентаризация",				НСтр("ru='Инвентаризация:';uk='Інвентаризація:'",КодЯзыка));
	СоответствиеПараметров.Вставить("КассаККМ",						НСтр("ru='ЭККА:';uk='ЕККА:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Валюта",						НСтр("ru='Валюта:';uk='Валюта:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Подразделение",				НСтр("ru='Подразделение:';uk='Підрозділ:'",КодЯзыка));
	СоответствиеПараметров.Вставить("Основание",					НСтр("ru='Основание:';uk='Підстава:'",КодЯзыка));
	СоответствиеПараметров.Вставить("ФизЛицо",						НСтр("ru='Подотчетник:';uk='Підзвітний:'",КодЯзыка));
	СоответствиеПараметров.Вставить("АдресДоставки",				НСтр("ru='Адрес доставки:';uk='Адреса доставки:'",КодЯзыка));
		
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = СокрЛП(Лев(Список, ПозЗапятой - 1));
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				ЗначениеПараметра = ВыборкаШапка[ИмяПараметра];
				Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
					//в договоре не указано особое наименование для печати
					Если ИмяПараметра = "ДоговорНаименованиеДляПечати" Тогда
						
						Попытка
							ДоговорКонтрагента = ВыборкаШапка["ДоговорКонтрагента"];
						Исключение 
							Продолжить;	
						КонецПопытки;

						ДоговорДата  = ДоговорКонтрагента.Дата;
						ДоговорНомер = ДоговорКонтрагента.Номер;
						
						Если ЗначениеЗаполнено(ДоговорНомер) Тогда
							//заменим название договора на его настоящий номер
							ЗначениеПараметра = "№ " + СокрП(ДоговорНомер);
						Иначе
							// названием будет наименование справочника
							ЗначениеПараметра = ДоговорКонтрагента.Наименование;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ДоговорДата) Тогда
							// добавим дату договора
							ЗначениеПараметра = ЗначениеПараметра + НСтр("ru=' от ';uk=' від '",КодЯзыка) + Формат(ДоговорДата,"ДФ=dd.MM.yyyy")
						КонецЕсли;
					Иначе					
                         Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// корректируем значение параметра в некоторых случаях
				Если    ИмяПараметра = "Сделка" 
					ИЛИ ИмяПараметра = "ДокументПередачи"
					ИЛИ ИмяПараметра = "Инвентаризация"
					ИЛИ ИмяПараметра = "Заказ" Тогда
					
					ЗначениеПараметра = Локализация.ПолучитьЛокализованноеПредставление(ЗначениеПараметра, КодЯзыка);
					
				КонецЕсли; 
				
				
				НазваниеПараметра = Строка(СоответствиеПараметров[ИмяПараметра]);
				Если НЕ ЗначениеЗаполнено(НазваниеПараметра) Тогда
					НазваниеПараметра = ИмяПараметра + ":";
				КонецЕсли;
				
				// корректируем название параметра в некоторых случаях	
				Если ИмяПараметра = "Сделка" Тогда
					
					ДоговорВедениеВзаиморасчетов = ВыборкаШапка["ДоговорВедениеВзаиморасчетов"];
					Если ДоговорВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
							НазваниеПараметра = НСтр("ru='Заказ:';uk='Замовлення:'",КодЯзыка);
					ИначеЕсли ДоговорВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
							НазваниеПараметра = НСтр("ru='Счет:';uk='Рахунок:'",КодЯзыка);
					КонецЕсли;
					
				КонецЕсли; 

				МассивСтруктур.Добавить(Новый Структура("НазваниеПараметра,ЗначениеПараметра", 
				                                  НазваниеПараметра,
												  ЗначениеПараметра));
			Исключение
			КонецПопытки;
		КонецЕсли; 
	КонецЦикла;

	Возврат МассивСтруктур;

КонецФункции // ДополнительнаяИнформация()

// Функция собирает фамилию, имя и отчество физ. лица на указанную дату
//
// Параметры: 
//  ФизЛицо.    - физ. лицо, для которго необходимо получить данные
//  ДатаПериода - дата получения сведений
//
// Возвращаемое значение:
//  Структура с данными.
//
Функция ФамилияИмяОтчество(ФизЛицо, ДатаПериода) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарФизЛицо",     ФизЛицо);
	Запрос.УстановитьПараметр("ПарДатаПериода", ДатаПериода);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Фамилия,
	|	Имя,
	|	Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ПарДатаПериода, ФизЛицо = &ПарФизЛицо)
 	|";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Результат = Новый Структура("Фамилия, Имя, Отчество");

	Результат.Фамилия  = ?(НЕ ЗначениеЗаполнено(Шапка.Фамилия),  "", Шапка.Фамилия);
	Результат.Имя      = ?(НЕ ЗначениеЗаполнено(Шапка.Имя),      "", Шапка.Имя);
	Результат.Отчество = ?(НЕ ЗначениеЗаполнено(Шапка.Отчество), "", Шапка.Отчество);

	Возврат Результат;

КонецФункции // ФамилияИмяОтчество()

// Формирует описание серий и характеристик ТМЦ для печати
//
// Параметры
//  Выборка  – <ВыборкаИзРезультатаЗапроса > – Исходные данные
//
// Возвращаемое значение:
//   Строка - Описание серий и характеристик ТМЦ
//
Функция ПредставлениеСерий(Выборка) Экспорт

	Результат = "(";

	Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
		Результат = Результат + Выборка.Характеристика;
	КонецЕсли;

	Если ЗначениеЗаполнено(Выборка.Серия) Тогда
		Результат = ?(Результат = "(", Результат, Результат + "; ");
		Результат = Результат + Выборка.Серия;
	КонецЕсли;

	Результат = Результат + ")";

	Возврат ?(Результат = "()", "", " " + Результат)

КонецФункции // ПредставлениеСерий()

// Стандартная для данной конфигурации функция форматирования прописи количества
//
// Параметры: 
//  Количество - число, которое мы хотим форматировать
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление количества.
//
Функция КоличествоПрописью(Количество, КодЯзыка = "ru") Экспорт

	ЦелаяЧасть   = Цел(Количество);
	ДробнаяЧасть = Окр(Количество - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";

	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, десятая, десятых, десятых, м, 1';uk='ціла ,цілих ,цілих , ж, десята, десятих, десятих, м, 1'",КодЯзыка);

	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, сотая, сотых, сотых, м, 2';uk='ціла ,цілих ,цілих , ж, сота, сотих, сотих, м, 2'",КодЯзыка);

	Иначе
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3';uk='ціла ,цілих ,цілих , ж, тисячна, тисячних, тисячних, м, 3'",КодЯзыка);

	КонецЕсли;

	Возврат ЧислоПрописью(Количество,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыка), ПараметрыПрописи);

КонецФункции // КоличествоПрописью()

// Функция собирает подразделение и должность физ. лица на указанную дату
//
// Параметры: 
//  ФизЛицо.    - физ. лицо, для которго необходимо получить данные
//  ДатаПериода - дата получения сведений
//  Организация - организация, для которой необходимо получить данные
//
// Возвращаемое значение:
//  Структура с данными.
//
Функция ДолжностьОтветственногоЛицаОрганизации(ФизЛицо, ДатаПериода, Организация) Экспорт

	Результат = Новый Структура("Должность");

	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ФизЛицо"    , ФизЛицо);
		Запрос.УстановитьПараметр("ДатаПериода", ДатаПериода);
		Запрос.УстановитьПараметр("Организация", Организация);

		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Должность.Представление КАК Должность
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаПериода, СтруктурнаяЕдиница = &Организация)
		|ГДЕ
		|	ФизическоеЛицо = &ФизЛицо
		|";

		Шапка = Запрос.Выполнить().Выбрать();
		Если Шапка.Следующий() Тогда
			Результат.Должность = Шапка.Должность;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ДолжностьОтветственногоЛицаОрганизации()

// Функция расчитывает ширину области в табличном докумете
//
// Параметры:
//  ИмяОбласти    - Строка, имя области для которой необходимо получить ширину
//  Макет - ТабличныйДокумент
//
// Возвращаемое значение:
//  число
//
Функция РасчетШириныОбластиМакета(ИмяОбласти, Макет) Экспорт
	
	ШиринаКолонки = 0;

	НизМест = Макет.Область(ИмяОбласти).Низ;

	Для Сч = Макет.Область(ИмяОбласти).Лево По Макет.Область(ИмяОбласти).Право Цикл
		ШиринаКолонки = ШиринаКолонки + Макет.Область(, Сч, НизМест).ШиринаКолонки;
	КонецЦикла;
	возврат ШиринаКолонки;

КонецФункции

// Формируется текст плательщика или получателя для печатной формы платежного документа
//
// Параметры
//  ТекстНаименования  	– <строка> – значение реквизита документа, если реквизит заполнен, он и выводится на печать
//  ВладелецСчета  		– <СправочникСсылка.Организации>/<СправочникСсылка.Контрагенты> – владелец банковского счета
//  БанковскийСчет		– <СправочникСсылка.БанковскиеСчета> – банковский счет плательщика или получателя
//  ВидОперации			– <Перечисление.ВидыОперацийППИсходящее> – вид операции документа
//
// Возвращаемое значение:
//   <Строка>			– наименование плательщика или получателя, которое будет выводиться в печатной форме платежного документа
//
Функция СформироватьТекстНаименованияПлательшикаПолучателя(ТекстНаименования, ВладелецСчета, БанковскийСчет, ВидОперации = Неопределено) Экспорт
	
	ТекстРезультат = ТекстНаименования;
	Если ПустаяСтрока(ТекстРезультат) Тогда
		
		Если ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Организации") 
		  И ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога 
		  И НЕ ПустаяСтрока(ВладелецСчета.НаименованиеПлательщикаПриПеречисленииНалогов) Тогда
		  
			ТекстРезультат = ВладелецСчета.НаименованиеПлательщикаПриПеречисленииНалогов;
			
		ИначеЕсли ПустаяСтрока(БанковскийСчет.ТекстКорреспондента) Тогда
			
			ТекстРезультат = ?(ПустаяСтрока(ВладелецСчета.НаименованиеПолное), 
			                   ВладелецСчета.Наименование, ВладелецСчета.НаименованиеПолное);
			Если ЗначениеЗаполнено(БанковскийСчет.БанкДляРасчетов) Тогда
				ТекстРезультат = ТекстРезультат + " р/с " + БанковскийСчет.НомерСчета
				+ " в " + БанковскийСчет.Банк + " " + БанковскийСчет.Банк.Город;
			КонецЕсли;	
			
		Иначе
			
			ТекстРезультат = БанковскийСчет.ТекстКорреспондента;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстРезультат;
	
КонецФункции // СформироватьТекстНаименованияПлательшикаПолучателя()

// Устанавливает отбор при выбор подразддления организации или сотрудника органиазации в отборе СКД
// 
// Параметры:
//  Элемент              - элемент выбора
//  КомпоновщикНастроек  - компоновщик настроек
//  ПоляОрганизаций      - поля СКД, в которых назначается отбор по организации
//  Объект               - отчет
//  СтандартнаяОбработка - признак стандартной обработки
//
Процедура ПодставитьОтборОрганизации(Элемент, КомпоновщикНастроек, ПоляОрганизаций = Неопределено, Объект, СтандартнаяОбработка) Экспорт
	
	СписокПолеОргаинзация = Новый СписокЗначений;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("ПолеКомпоновкиДанных") тогда
		СписокПолеОргаинзация.Добавить(ПоляОрганизаций);
	КонецЕсли;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("СписокЗначений") тогда
		СписокПолеОргаинзация = ПоляОрганизаций;
	КонецЕсли;
	
	Если ТипЗнч(ПоляОрганизаций) = Тип("Массив") тогда
		СписокПолеОргаинзация.ЗагрузитьЗначения(ПоляОрганизаций);
	КонецЕсли;
	
	Организация = Неопределено;
	
	Для каждого ЭлементОтбора из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если СписокПолеОргаинзация.НайтиПоЗначению(ЭлементОтбора.ЛевоеЗначение) <> Неопределено И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Организации") тогда
			
			Организация = ЭлементОтбора.ПравоеЗначение;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Организация <> Неопределено тогда
		
		Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ПодразделенияОрганизаций") тогда
			
			Элемент.ВыборПоВладельцу = Организация;
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.СотрудникиОрганизаций") тогда
			
			ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Объект, Истина, ОбщегоНазначения.ПолучитьРабочуюДату(), ОбщегоНазначения.ГоловнаяОрганизация(Организация), 1, СтандартнаяОбработка, Элемент.Значение);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПодставитьОтборОрганизации()

#Если Клиент Тогда

// Заполняет список пунктов подменю выбора печатных форм значениями переданного соответствия.
// Всем кнопкам назначается одно переданное действие.
//
// Параметры:
//  ЭлементМеню            - кнопка командной панели формы, соответствующая подменю выбора печатных форм, 
//                           которое надо заполнить, 
//  СоответствиеМакетов    - соответствие, содержащее список макетов печатных форм 
//                           объекта для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбора  - действие, которое надо выполнить при выборе любого пункта подменю.
//
Процедура УстановитьПодменюВыбораПечатнойФормы(ЭлементМеню, СписокМакетов, ОбъектОбработкиВыбора) Экспорт

	Если ТипЗнч(СписокМакетов) = Тип("Соответствие") Тогда
		Для каждого ЭлементЗаполнения Из СписокМакетов Цикл
			ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Значение, ТипКнопкиКоманднойПанели.Действие, 
			                            ЭлементЗаполнения.Ключ, ОбъектОбработкиВыбора);
		КонецЦикла;
	ИначеЕсли ТипЗнч(СписокМакетов) = Тип("СписокЗначений") Тогда
		Для каждого СтрокаМакетаВСписке Из СписокМакетов Цикл			
			Если СтрокаМакетаВСписке.Значение = Неопределено Тогда
				ЭлементМеню.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			Иначе			
				Если ТипЗнч(СтрокаМакетаВСписке.Значение) = Тип("Строка") Тогда
					ЭлементМеню.Кнопки.Добавить(СтрокаМакетаВСписке.Значение, ТипКнопкиКоманднойПанели.Действие, 
					                            СтрокаМакетаВСписке.Представление, ОбъектОбработкиВыбора); 
				Иначе
					ЭлементМеню.Кнопки.Добавить(СтрЗаменить(СтрокаМакетаВСписке.Значение.УникальныйИдентификатор(), "-", "_"), ТипКнопкиКоманднойПанели.Действие, 
					                            СтрокаМакетаВСписке.Представление, ОбъектОбработкиВыбора); 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
 	КонецЕсли;


КонецПроцедуры // УстановитьПодменюВыбораПечатнойФормы()

#КонецЕсли

Функция ПолучитьТелефонДляНалоговойНакладной(Телефоны) Экспорт
	
	Результат = СокрЛП(Телефоны);
	// может быть несколько телефонов, через запятую, возьмем до первой запятой
	Поз = Найти(Результат, ",");
	Если Поз > 0 Тогда
		Результат = Лев(Результат, Поз - 1);
	КонецЕсли; 
	
	Поз = Найти(Результат, ";");
	Если Поз > 0 Тогда
		Результат = Лев(Результат, Поз - 1);
	КонецЕсли; 
	
	РезультатТолькоЦифры = "";
	ДлинаСтрокиТелефонов = СтрДлина(Результат);
	
	// удалим все не цифры
	Для НомерСимвола = 1 По ДлинаСтрокиТелефонов Цикл
		ТекСимвол = Сред(Результат, НомерСимвола, 1);
		Если Найти("0123456789", ТекСимвол) = 0 Тогда
			Продолжить;
		Иначе
			РезультатТолькоЦифры = РезультатТолькоЦифры + ТекСимвол;
		КонецЕсли;
	КонецЦикла; 	
	//для выравнивания по правому краю дополним слева пробелами
	РезультатТолькоЦифры = "          " + РезультатТолькоЦифры;

	// возьмем 10 правых 
	РезультатТолькоЦифры = Прав(РезультатТолькоЦифры, 10);
	
	Возврат РезультатТолькоЦифры;

КонецФункции // ПолучитьТелефонДляНалоговойНакладной()

